clear;clc;clf




lo







% %% Supersonic rotor design
% ttc_m = 0.065;
% min_chord_m = min_reynolds*kin_visc/W_1m;       % meters, minimum chord to get reynolds
% chord_m = 0.07;
% 
% i = rad2deg(ttc_m);
% 
% dev_ang_m = abs(beta_2m-beta_1m) / 4 * sqrt(solidity_rotor) + 2;
% 
% % Camber angle
% K_1m = beta_1m - i;
% K_2m = beta_2m - dev_ang_m;
% camber_m = K_1m - K_2m;
% 
% stagger_ang = beta_1m - camber_m/2 - i;
% 
% num_blades_rotor = 2 * pi * r_mean_1 / chord_m;
% 
% %% Subsonic stator design
% T0_2m = T0_1 + U_1m*(Ctheta_2m-Ctheta_1m)/cp;
% T_2m  = T0_2m - C_2m^2/(2*cp);
% a_2 = sqrt((gamma-1)*cp*T_2m);
% 
% Mc_2m = C_2m/a_2;




% for i = 1:num_stations
%     if mod(i,2) == 1
%         T = T0_stations(i) - rps.C_1m^2/(2*cp); % | spanwise constant (design choice i think)
%         a = sqrt((gamma-1)*cp*T);
% 
%         Mc = rps.C_1m/a;
%         Mw = rps.W_1m/a;
% 
%         P = P0_stations(i)/(1+(gamma-1)*Mc^2/2)^(gamma/(gamma-1)); % | spanwise constant (design choice i think)
%         rho = P/(R*T);
% 
%         A = m_dot/rho/Cz;
% 
%         T_stations(i) = T
%         a_stations(i) = a;
%         Mc_stations(i) = Mc;
%         Mw_stations(i) = Mw;
%     else
%         T_stations(i) = T0_stations(i) - rps.C_2m^2/(2*cp); % | spanwise constant (design choice i think)
%     end
% 
% end



% function frame = framework(num_stations)
%     flowInfo = struct( ...
%         "C_vec",        [], ...
%         "W_vec",        [], ...
%         "U_vec",        [], ...
%         "z_vec",        [], ...
%         "C_theta_vec",  [], ...
%         "W_theta_vec",  [], ...
%         "C",            [], ...
%         "W",            [], ...
%         "U",            [], ...
%         "z",            [], ...
%         "C_theta",      [], ...
%         "W_theta",      [], ...
%         "M_C",          [], ...
%         "M_W",          [], ...
%         "M_U",          [], ...
%         "M_z",          [], ...
%         "alpha",        [], ...
%         "beta",         [] ...
%         );
% 
%     frame = repmat(flowInfo, num_stations, 1);
% end








% % Things we have after station 1
% % C_theta_1
% % Updated annulus geometry
% % T01
% % P01
% % T1
% % P1
% % H01
% 
% 
% % Things to calculate for station 1
% % T02 
% 
% 
% %% Station 1 to Station 2 Linking
% % Initialization fluff
% U2 = ang_vel.*r_grid{2};
% U_rotor = (U1 + U2) ./ 2;
% 
% W_m_2 = W_m_1;      % Initial assumption
% C_theta_2 = eleven_five(C_theta_1, psi_c_vec(1), U_r_mean_vec(1), r_mean_vec(1), r_grid{1}, r_grid{2});
% 
% 
% % Transition Thermodynamics
% dH0 = phi_c_vec(1) .* U_rotor.^2;
% T02 = T01 + dH0./cp;
% 

% 
% function [T02, P02, h02] = transition_calcs(H01, U_1, U_2, C_theta_1, W_m_1, cp, R, T01, P01)     %(W_m, C_theta_1, U_1, U_rotor, S1, T01, P01, cp, gamma, loss, phi_c_vec, R)
%     I1 = H01 - U_1.*C_theta_1;
%     W_theta_1 = C_theta_1 - U_1;
%     W_1 = sqrt(W_m_1.^2 + W_theta_1.^2);
%     H01R = I1 + 0.5.*U_1.^2;
% 
% 
%     P01R = "huhhhh"
%     T01R = "huhhhh"
% 
%     I2 = I1;
%     H02R = I2 + 0.5.*U_2.^2;
% 
%     P02R_i = P01R;
%     P02R = P02R_i - loss .* (P01R - P1);
%     T02R = T02R;
% 
%     % C_m = W_m;
%     % C_1 = sqrt(C_m.^2 + C_theta_1.^2);
%     % 
%     % dH0 = phi_c_vec(1) .* U_rotor.^2;
%     % T02 = T01 + dH0./cp;
%     % 
%     % h02 = cp.*T02;                              % Total enthalpy        | Assumed constant spanwise
%     % P2 = P02 .* (T2./T02).^(gamma/(gamma-1));   % Static pressure       | Spanwise distribution
% end





% Turbofan = struct( ...
%     "Info", [],...
%     "Compressor", struct( ...
%         "HP", repmat(struct( ...
%             "T01", [], ...
%             "P01", []), ...
%             num_HP_compressors, 1), ...
%         "LP", repmat(struct( ...
%             "T01", [], ...
%             "P01", []), ...
%             num_LP_compressors, 1) ...
%         ), ...
%     "Combustor", [], ...
%     "Turbine", struct( ...
%         "HP", repmat(struct( ...
%             "T01", [], ...
%             "P01", []), ...
%             num_HP_turbines, 1), ...
%         "LP", repmat(struct( ...
%             "T01", [], ...
%             "P01", []), ...
%             num_LP_turbines, 1) ...
%         ) ...
%     );